#!/usr/bin/env python3
"""
Script de teste para verificar a integra√ß√£o entre frontend e backend
"""

import os
import sys

# Adicionar o diret√≥rio ao path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

print("=== Teste de Integra√ß√£o AURALIS ===\n")

# 1. Verificar vari√°veis de ambiente
print("1. Verificando vari√°veis de ambiente:")
openai_key = os.getenv("OPENAI_API_KEY")
if openai_key:
    print(f"   ‚úÖ OPENAI_API_KEY configurada: {openai_key[:10]}...")
else:
    print("   ‚ùå OPENAI_API_KEY n√£o configurada - sistema usar√° modo simulado")

debug_mode = os.getenv("DEBUG_MODE")
print(f"   DEBUG_MODE: {debug_mode or 'N√£o definido'}")

# 2. Testar importa√ß√£o do backend
print("\n2. Testando importa√ß√£o do backend:")
try:
    from main import AURALISBackend
    print("   ‚úÖ Backend importado com sucesso")
except Exception as e:
    print(f"   ‚ùå Erro ao importar backend: {e}")
    sys.exit(1)

# 3. Criar inst√¢ncia do backend
print("\n3. Criando inst√¢ncia do backend:")
try:
    backend = AURALISBackend(mock_mode=None)
    print(f"   ‚úÖ Backend criado em modo: {'mock' if backend.mock_mode else 'produ√ß√£o'}")
except Exception as e:
    print(f"   ‚ùå Erro ao criar backend: {e}")
    sys.exit(1)

# 4. Testar autentica√ß√£o
print("\n4. Testando autentica√ß√£o:")
user = backend.authenticate("teste", "123")
if user:
    print(f"   ‚úÖ Usu√°rio autenticado: {user.get('username')}")
else:
    print("   ‚ùå Falha na autentica√ß√£o")

# 5. Testar processamento de mensagem
print("\n5. Testando processamento de mensagem:")
try:
    resposta = backend.process_user_message("Ol√°, como voc√™ pode me ajudar?")
    print(f"   ‚úÖ Resposta recebida ({len(resposta)} caracteres)")
    print(f"   Preview: {resposta[:100]}...")
except Exception as e:
    print(f"   ‚ùå Erro ao processar mensagem: {e}")

# 6. Verificar qual implementa√ß√£o est√° sendo usada
print("\n6. Verificando implementa√ß√£o dos agentes:")
try:
    from src.agentes.sistema_agentes import SistemaAgentes
    sistema = SistemaAgentes(modo_debug=True)
    
    # Verificar tipo do orquestrador
    orq_type = type(sistema.orquestrador).__name__
    base_class = type(sistema.orquestrador).__bases__[0].__name__
    
    print(f"   Orquestrador: {orq_type}")
    print(f"   Classe base: {base_class}")
    
    if base_class == "AgenteBaseSimulado":
        print("   ‚ö†Ô∏è  Usando implementa√ß√£o SIMULADA (mock)")
    else:
        print("   ‚úÖ Usando implementa√ß√£o REAL")
        
except Exception as e:
    print(f"   ‚ùå Erro ao verificar implementa√ß√£o: {e}")

print("\n=== Fim do teste ===")

# 7. Informa√ß√µes para configurar OpenAI
if not openai_key:
    print("\nüìù Para usar IA real, configure a vari√°vel de ambiente:")
    print("   export OPENAI_API_KEY='sua-chave-aqui'")
    print("   ou crie um arquivo .env com:")
    print("   OPENAI_API_KEY=sua-chave-aqui")