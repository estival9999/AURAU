#!/usr/bin/env python3
"""
Assistente RAG Interativo com Busca H√≠brida
Execute: python assistente_rag.py
"""

import os
import sys
from dotenv import load_dotenv
from datetime import datetime
import json

# Adicionar diret√≥rio ao path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from hybrid_search_rag_test import HybridSearchRAG

# Carregar vari√°veis de ambiente
load_dotenv()

class AssistenteRAG:
    def __init__(self):
        """Inicializa o assistente RAG"""
        SUPABASE_URL = os.getenv("SUPABASE_URL")
        SUPABASE_KEY = os.getenv("SUPABASE_ANON_KEY")
        OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
        
        print("ü§ñ Inicializando Assistente RAG...")
        self.rag_system = HybridSearchRAG(SUPABASE_URL, SUPABASE_KEY, OPENAI_API_KEY)
        self.historico = []
        
    def processar_pergunta(self, pergunta):
        """Processa uma pergunta e retorna a resposta"""
        # Configura√ß√£o otimizada baseada nos testes de performance
        # Padr√£o: H√≠brida (0.8, 1.5) - melhor equil√≠brio geral
        full_text_weight = 0.8
        semantic_weight = 1.5
        
        # Ajustes finos baseados no tipo de pergunta
        if "?" in pergunta or any(q in pergunta.lower() for q in ["como", "o que", "qual", "quando", "onde", "por que"]):
            # Pergunta natural - aumentar um pouco o peso sem√¢ntico
            semantic_weight = 1.8
        elif len(pergunta.split()) <= 3 and not "?" in pergunta:
            # Busca por palavras-chave espec√≠ficas
            full_text_weight = 1.2
            semantic_weight = 1.0
        elif any(termo in pergunta.lower() for termo in ["cpf", "cep", "auralis", "pantaneta"]):
            # Termos t√©cnicos ou nomes pr√≥prios - mais full-text
            full_text_weight = 1.5
            semantic_weight = 0.8
        
        # Buscar documentos relevantes
        print("\nüîç Buscando informa√ß√µes...")
        results = self.rag_system.hybrid_search(
            pergunta,
            match_count=5,
            full_text_weight=full_text_weight,
            semantic_weight=semantic_weight
        )
        
        if not results:
            return {
                "resposta": "Desculpe, n√£o encontrei informa√ß√µes sobre isso na base de conhecimento. Tente reformular sua pergunta.",
                "fontes": [],
                "documentos": 0
            }
        
        print(f"‚úÖ Encontrei {len(results)} documentos relevantes")
        
        # Gerar resposta
        print("üí≠ Processando resposta...")
        
        system_prompt = """Voc√™ √© um assistente especializado em dar respostas com base em documentos internos da empresa.
        Responda de forma clara, objetiva e estruturada, usando apenas as informa√ß√µes do contexto fornecido.
        Use bullet points quando apropriado para melhor legibilidade."""
        
        resposta = self.rag_system.generate_rag_response(
            pergunta, 
            results,
            system_prompt=system_prompt
        )
        
        # Extrair fontes
        fontes = []
        for doc in results[:3]:
            if isinstance(doc, dict):
                metadata = doc.get('metadata', {})
                if isinstance(metadata, dict):
                    fonte = metadata.get('fonte', 'Documento')
                    chunk = metadata.get('chunk_number', '?')
                    fontes.append(f"{fonte} - Se√ß√£o {chunk}")
        
        return {
            "resposta": resposta,
            "fontes": list(set(fontes)),  # Remover duplicatas
            "documentos": len(results)
        }
    
    def chat_interativo(self):
        """Interface de chat interativa"""
        print("\n" + "="*70)
        print("üí¨ ASSISTENTE RAG - BUSCA H√çBRIDA INTELIGENTE")
        print("="*70)
        
        print("\nüìö Base de Conhecimento Dispon√≠vel:")
        print("   ‚Ä¢ Manual AURALIS - Sistema de gest√£o de reuni√µes com IA")
        print("   ‚Ä¢ Manual Cooperativa Pantaneta - Cooperativa de cr√©dito")
        
        print("\nüéØ Dicas para melhores resultados:")
        print("   ‚Ä¢ Fa√ßa perguntas espec√≠ficas")
        print("   ‚Ä¢ Use palavras-chave relevantes")
        print("   ‚Ä¢ Perguntas naturais funcionam muito bem!")
        
        print("\nüí° Exemplos:")
        print('   ‚Ä¢ "Como gravar uma reuni√£o no AURALIS?"')
        print('   ‚Ä¢ "Quais s√£o as taxas de cr√©dito rural?"')
        print('   ‚Ä¢ "Procedimentos de seguran√ßa de dados"')
        
        print("\nüìù Comandos especiais:")
        print("   ‚Ä¢ 'sair' - encerrar chat")
        print("   ‚Ä¢ 'limpar' - limpar tela")
        print("   ‚Ä¢ 'historico' - ver perguntas anteriores")
        
        print("\n" + "-"*70)
        
        while True:
            try:
                # Receber entrada
                print("\n‚ùì Sua pergunta:")
                pergunta = input(">>> ").strip()
                
                # Comandos especiais
                if pergunta.lower() in ['sair', 'exit', 'quit', 'q']:
                    print("\nüëã Obrigado por usar o Assistente RAG! At√© logo!")
                    break
                
                if pergunta.lower() == 'limpar':
                    os.system('clear' if os.name == 'posix' else 'cls')
                    continue
                
                if pergunta.lower() == 'historico':
                    if self.historico:
                        print("\nüìú Hist√≥rico de perguntas:")
                        for i, h in enumerate(self.historico[-5:], 1):
                            print(f"   {i}. {h}")
                    else:
                        print("\nüìú Hist√≥rico vazio")
                    continue
                
                if not pergunta:
                    continue
                
                # Adicionar ao hist√≥rico
                self.historico.append(pergunta)
                
                # Processar pergunta
                resultado = self.processar_pergunta(pergunta)
                
                # Exibir resposta
                print("\n" + "="*70)
                print("ü§ñ RESPOSTA:")
                print("="*70)
                print(resultado["resposta"])
                print("="*70)
                
                # Exibir metadados
                print(f"\nüìä Metadados:")
                print(f"   ‚Ä¢ Documentos analisados: {resultado['documentos']}")
                if resultado["fontes"]:
                    print(f"   ‚Ä¢ Fontes principais:")
                    for fonte in resultado["fontes"]:
                        print(f"     - {fonte}")
                
            except KeyboardInterrupt:
                print("\n\n‚ö†Ô∏è  Interrompido pelo usu√°rio")
                break
            except Exception as e:
                print(f"\n‚ùå Erro: {str(e)}")
                print("Por favor, tente novamente.")

def main():
    """Fun√ß√£o principal"""
    try:
        assistente = AssistenteRAG()
        assistente.chat_interativo()
    except Exception as e:
        print(f"‚ùå Erro ao inicializar: {str(e)}")
        print("Verifique se as credenciais est√£o corretas no arquivo .env")

if __name__ == "__main__":
    main()