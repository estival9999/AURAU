#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de demonstra√ß√£o e teste para manipula√ß√£o segura de caminhos.
Mostra exemplos pr√°ticos de como evitar problemas com espa√ßos e caracteres especiais.
"""

import os
import sys
from pathlib import Path

# Adiciona o diret√≥rio src ao path
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

from utils_caminhos import ManipuladorCaminhos, validar_antes_criar


def demonstrar_problema():
    """Demonstra o problema com barras invertidas em caminhos."""
    print("="*60)
    print("DEMONSTRA√á√ÉO DO PROBLEMA COM BARRAS INVERTIDAS")
    print("="*60)
    
    # Caminho problem√°tico
    caminho_errado = "/home/mateus/√Årea\\ de\\ trabalho/X_AURA/teste"
    caminho_correto = "/home/mateus/√Årea de trabalho/X_AURA/teste"
    
    print(f"\n‚ùå FORMA ERRADA (com barras invertidas):")
    print(f"   {caminho_errado}")
    print(f"   Isso pode criar diret√≥rios como: '√Årea\\', 'de\\', 'trabalho\\'")
    
    print(f"\n‚úÖ FORMA CORRETA (sem escapes, usar aspas no shell):")
    print(f"   {caminho_correto}")
    print(f'   No shell usar: mkdir -p "{caminho_correto}"')


def demonstrar_solucao():
    """Demonstra as solu√ß√µes implementadas."""
    print("\n" + "="*60)
    print("SOLU√á√ïES IMPLEMENTADAS")
    print("="*60)
    
    manipulador = ManipuladorCaminhos()
    
    # Exemplo de caminho com espa√ßos
    caminho_teste = "/home/mateus/√Årea de trabalho/X_AURA/teste_espacos/novo diret√≥rio"
    
    print(f"\n1. NORMALIZA√á√ÉO DE CAMINHOS:")
    print(f"   Original: {caminho_teste}")
    print(f"   Normalizado: {manipulador.normalizar_caminho(caminho_teste)}")
    
    print(f"\n2. FORMATA√á√ÉO PARA SHELL:")
    print(f"   Com aspas duplas: {manipulador.caminho_com_aspas(caminho_teste)}")
    print(f"   Shell-safe (shlex): {manipulador.caminho_shell_safe(caminho_teste)}")
    
    print(f"\n3. CRIA√á√ÉO SEGURA DE DIRET√ìRIOS:")
    print(f"   Usando Python Path (recomendado):")
    print(f"   >>> manipulador.criar_diretorio_seguro('{caminho_teste}')")
    
    # Cria o diret√≥rio de teste
    if manipulador.criar_diretorio_seguro(caminho_teste):
        print(f"   ‚úÖ Diret√≥rio criado com sucesso!")
        
        # Verifica se foi criado corretamente
        if manipulador.validar_caminho_diretorio(caminho_teste):
            print(f"   ‚úÖ Verificado: diret√≥rio existe no local correto")
        
        # Remove o diret√≥rio de teste
        try:
            import shutil
            shutil.rmtree("/home/mateus/√Årea de trabalho/X_AURA/teste_espacos")
            print(f"   üóëÔ∏è  Diret√≥rio de teste removido")
        except:
            pass


def exemplos_praticos():
    """Mostra exemplos pr√°ticos de uso."""
    print("\n" + "="*60)
    print("EXEMPLOS PR√ÅTICOS DE USO")
    print("="*60)
    
    manipulador = ManipuladorCaminhos()
    
    print("\nüìÅ EXEMPLO 1: Criar estrutura de diret√≥rios do projeto")
    diretorios_projeto = [
        "/home/mateus/√Årea de trabalho/X_AURA/src/database",
        "/home/mateus/√Årea de trabalho/X_AURA/src/database/migrations",
        "/home/mateus/√Årea de trabalho/X_AURA/src/database/models",
        "/home/mateus/√Årea de trabalho/X_AURA/data/audio files",
        "/home/mateus/√Årea de trabalho/X_AURA/data/meeting notes"
    ]
    
    for dir_path in diretorios_projeto:
        print(f"\n   Criando: {dir_path}")
        print(f'   Comando seguro: mkdir -p "{dir_path}"')
    
    print("\n\nüìù EXEMPLO 2: Comandos shell seguros")
    print("   # Listar arquivos em diret√≥rio com espa√ßos:")
    print('   ls -la "/home/mateus/√Årea de trabalho/X_AURA"')
    
    print("\n   # Copiar arquivo para diret√≥rio com espa√ßos:")
    print('   cp arquivo.txt "/home/mateus/√Årea de trabalho/X_AURA/data/meeting notes/"')
    
    print("\n   # Mover arquivo entre diret√≥rios com espa√ßos:")
    print('   mv "/home/mateus/√Årea de trabalho/X_AURA/old file.txt" "/home/mateus/√Årea de trabalho/X_AURA/new file.txt"')
    
    print("\n\nüêç EXEMPLO 3: Uso em Python")
    print("""
from pathlib import Path
from src.utils_caminhos import ManipuladorCaminhos

# M√©todo 1: Usando pathlib (recomendado)
caminho = Path("/home/mateus/√Årea de trabalho/X_AURA/src/database")
caminho.mkdir(parents=True, exist_ok=True)

# M√©todo 2: Usando o utilit√°rio
manipulador = ManipuladorCaminhos()
manipulador.criar_diretorio_seguro("/home/mateus/√Årea de trabalho/X_AURA/src/database")

# M√©todo 3: Executar comando shell de forma segura
sucesso, output = manipulador.executar_comando_seguro(
    "mkdir -p",
    "/home/mateus/√Årea de trabalho/X_AURA/src/database"
)
""")


def regras_importantes():
    """Lista as regras mais importantes."""
    print("\n" + "="*60)
    print("‚ö†Ô∏è  REGRAS IMPORTANTES - MEMORIZE!")
    print("="*60)
    
    regras = [
        "1. SEMPRE use aspas duplas em caminhos com espa√ßos no shell",
        "2. NUNCA use barras invertidas (\\) para escapar espa√ßos",
        "3. SEMPRE valide o caminho antes de criar diret√≥rios",
        "4. PREFIRA usar Python Path em vez de comandos shell quando poss√≠vel",
        "5. SEMPRE verifique se o diret√≥rio foi criado no local correto",
        "6. Use o utilit√°rio utils_caminhos.py para opera√ß√µes complexas",
        "7. Em caso de d√∫vida, imprima o caminho primeiro para verificar"
    ]
    
    for regra in regras:
        print(f"\n   üî∏ {regra}")
    
    print("\n\nüí° DICA FINAL:")
    print("   Se voc√™ ver diret√≥rios como 'de/', 'trabalho/', '√Årea/' criados")
    print("   isoladamente, √© sinal de que houve erro com escapes de espa√ßos!")


if __name__ == "__main__":
    # Executa todas as demonstra√ß√µes
    demonstrar_problema()
    demonstrar_solucao()
    exemplos_praticos()
    regras_importantes()
    
    print("\n\n" + "="*60)
    print("‚úÖ DEMONSTRA√á√ÉO COMPLETA!")
    print("="*60)