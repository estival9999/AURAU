#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script para testar a conex√£o e verificar todos os dados inseridos no Supabase
Valida se os dados est√£o corretos e as rela√ß√µes funcionando
"""

import os
from supabase import create_client, Client
from dotenv import load_dotenv
from datetime import datetime

# Carregar vari√°veis de ambiente
load_dotenv()

# Configurar cliente Supabase
url = os.environ.get("SUPABASE_URL")
key = os.environ.get("SUPABASE_ANON_KEY")

print("üîÑ Testando conex√£o com Supabase...")
print(f"URL: {url[:30]}...")

try:
    supabase: Client = create_client(url, key)
    print("‚úÖ Conex√£o estabelecida com sucesso!\n")
except Exception as e:
    print(f"‚ùå Erro na conex√£o: {str(e)}")
    exit(1)

# Testar cada tabela
print("=" * 60)
print("üìä VERIFICANDO ESTRUTURA DO BANCO DE DADOS")
print("=" * 60)

# 1. TABELA USERS
print("\n1Ô∏è‚É£ TABELA: users")
print("-" * 40)
try:
    users = supabase.table('users').select("*").execute()
    print(f"‚úÖ Total de registros: {len(users.data)}")
    
    if users.data:
        print("\nüìã Amostra de dados:")
        for user in users.data[:3]:
            print(f"   ‚Ä¢ {user['full_name']} ({user['username']})")
            print(f"     Cargo: {user['role']} | Depto: {user['department']}")
            print(f"     Email: {user['email']}")
            print(f"     Ativo: {user['is_active']} | √öltimo login: {user.get('last_login', 'N/A')}")
            print()
        
        # Verificar campos
        campos_esperados = ['id', 'username', 'password_hash', 'email', 'full_name', 
                          'role', 'department', 'created_at', 'last_login', 'is_active']
        campos_tabela = list(users.data[0].keys())
        print(f"‚úÖ Campos da tabela: {len(campos_tabela)}")
        
        # Verificar se todos os campos esperados existem
        campos_faltando = set(campos_esperados) - set(campos_tabela)
        if campos_faltando:
            print(f"‚ö†Ô∏è  Campos faltando: {campos_faltando}")
        else:
            print("‚úÖ Todos os campos esperados est√£o presentes")
            
except Exception as e:
    print(f"‚ùå Erro ao acessar tabela users: {str(e)}")

# 2. TABELA MEETINGS
print("\n2Ô∏è‚É£ TABELA: meetings")
print("-" * 40)
try:
    meetings = supabase.table('meetings').select("*").order("start_time", desc=True).execute()
    print(f"‚úÖ Total de registros: {len(meetings.data)}")
    
    if meetings.data:
        print("\nüìã Amostra de dados:")
        for meeting in meetings.data[:3]:
            print(f"   ‚Ä¢ {meeting['title']}")
            print(f"     Data: {meeting['start_time'][:16]} | Dura√ß√£o: {meeting['duration_seconds']//60}min")
            print(f"     Status: {meeting['status']} | Participantes: {len(meeting.get('participants', []))}")
            print(f"     Pontos principais: {len(meeting.get('key_points', []))}")
            print(f"     Decis√µes: {len(meeting.get('decisions', []))}")
            
            # Verificar se tem transcri√ß√£o
            if meeting.get('transcription_full'):
                print(f"     Transcri√ß√£o: {len(meeting['transcription_full'])} caracteres")
            else:
                print(f"     Transcri√ß√£o: ‚ùå N√£o encontrada")
            print()
            
        # Testar rela√ß√£o com users
        meeting_com_user = supabase.table('meetings').select("*, users(full_name, role)").limit(1).execute()
        if meeting_com_user.data and 'users' in meeting_com_user.data[0]:
            print("‚úÖ Rela√ß√£o com tabela users funcionando")
        else:
            print("‚ö†Ô∏è  Problema na rela√ß√£o com tabela users")
            
except Exception as e:
    print(f"‚ùå Erro ao acessar tabela meetings: {str(e)}")

# 3. TABELA AI_INTERACTIONS
print("\n3Ô∏è‚É£ TABELA: ai_interactions")
print("-" * 40)
try:
    interactions = supabase.table('ai_interactions').select("*").order("created_at", desc=True).execute()
    print(f"‚úÖ Total de registros: {len(interactions.data)}")
    
    if interactions.data:
        print("\nüìã Amostra de dados:")
        total_tokens = 0
        total_time = 0
        
        for interaction in interactions.data[:3]:
            print(f"   ‚Ä¢ Pergunta: {interaction['user_message'][:80]}...")
            print(f"     Resposta: {interaction['ai_response'][:80]}...")
            print(f"     Tokens: {interaction['tokens_used']} | Tempo: {interaction['response_time_ms']}ms")
            print(f"     Modelo: {interaction['model_used']}")
            
            if interaction.get('context_used'):
                context = interaction['context_used']
                print(f"     Contexto: {len(context.get('meetings', []))} reuni√µes")
            print()
            
            total_tokens += interaction.get('tokens_used', 0)
            total_time += interaction.get('response_time_ms', 0)
        
        # Estat√≠sticas
        if interactions.data:
            avg_tokens = total_tokens / len(interactions.data)
            avg_time = total_time / len(interactions.data)
            print(f"\nüìä Estat√≠sticas gerais:")
            print(f"   ‚Ä¢ M√©dia de tokens por intera√ß√£o: {avg_tokens:.0f}")
            print(f"   ‚Ä¢ Tempo m√©dio de resposta: {avg_time:.0f}ms")
            
        # Testar rela√ß√£o com meetings
        interaction_com_meeting = supabase.table('ai_interactions').select("*, meetings(title)").eq('meeting_id', 'NOT NULL').limit(1).execute()
        if interaction_com_meeting.data:
            print("‚úÖ Rela√ß√£o com tabela meetings funcionando")
        else:
            print("‚ÑπÔ∏è  Nenhuma intera√ß√£o vinculada a reuni√£o espec√≠fica")
            
except Exception as e:
    print(f"‚ùå Erro ao acessar tabela ai_interactions: {str(e)}")

# 4. TABELA KNOWLEDGE_BASE
print("\n4Ô∏è‚É£ TABELA: knowledge_base")
print("-" * 40)
try:
    knowledge = supabase.table('knowledge_base').select("*").execute()
    if knowledge.data:
        print(f"‚úÖ Total de registros: {len(knowledge.data)}")
        print("\nüìã Amostra de dados:")
        for doc in knowledge.data[:3]:
            print(f"   ‚Ä¢ {doc['title']} (v{doc['version']})")
            print(f"     Tipo: {doc['doc_type']} | Depto: {doc['department']}")
            print(f"     Tags: {', '.join(doc.get('tags', []))}")
            print(f"     Atual: {doc['is_current']}")
            print()
    else:
        print("‚ÑπÔ∏è  Nenhum documento na base de conhecimento (conforme esperado)")
        
except Exception as e:
    print(f"‚ùå Erro ao acessar tabela knowledge_base: {str(e)}")

# 5. TESTAR FUN√á√ïES DE BUSCA
print("\n5Ô∏è‚É£ TESTANDO FUN√á√ïES DE BUSCA")
print("-" * 40)

# Testar busca textual em reuni√µes
try:
    print("üîç Testando search_meetings_text...")
    # Esta fun√ß√£o precisa ser criada como RPC no Supabase
    # Por enquanto, vamos testar busca direta
    
    resultado = supabase.table('meetings').select("*").ilike('transcription_full', '%sprint%').limit(3).execute()
    if resultado.data:
        print(f"‚úÖ Busca por 'sprint' retornou {len(resultado.data)} resultados")
    else:
        print("‚ÑπÔ∏è  Nenhum resultado encontrado para 'sprint'")
        
except Exception as e:
    print(f"‚ö†Ô∏è  Fun√ß√£o de busca n√£o dispon√≠vel ou erro: {str(e)}")

# 6. VERIFICAR INTEGRIDADE DOS DADOS
print("\n6Ô∏è‚É£ VERIFICA√á√ÉO DE INTEGRIDADE")
print("-" * 40)

# Verificar se todas as reuni√µes t√™m organizador v√°lido
try:
    meetings_sem_user = supabase.table('meetings').select("id, title").is_('user_id', 'null').execute()
    if meetings_sem_user.data:
        print(f"‚ö†Ô∏è  {len(meetings_sem_user.data)} reuni√µes sem organizador")
    else:
        print("‚úÖ Todas as reuni√µes t√™m organizador v√°lido")
        
    # Verificar se todas as intera√ß√µes t√™m usu√°rio v√°lido
    interactions_sem_user = supabase.table('ai_interactions').select("id").is_('user_id', 'null').execute()
    if interactions_sem_user.data:
        print(f"‚ö†Ô∏è  {len(interactions_sem_user.data)} intera√ß√µes sem usu√°rio")
    else:
        print("‚úÖ Todas as intera√ß√µes t√™m usu√°rio v√°lido")
        
except Exception as e:
    print(f"‚ùå Erro na verifica√ß√£o de integridade: {str(e)}")

# RESUMO FINAL
print("\n" + "=" * 60)
print("üìä RESUMO DA VERIFICA√á√ÉO")
print("=" * 60)

try:
    # Contar registros
    total_users = len(supabase.table('users').select("id").execute().data)
    total_meetings = len(supabase.table('meetings').select("id").execute().data)
    total_interactions = len(supabase.table('ai_interactions').select("id").execute().data)
    total_knowledge = len(supabase.table('knowledge_base').select("id").execute().data)
    
    print(f"‚úÖ Usu√°rios: {total_users}")
    print(f"‚úÖ Reuni√µes: {total_meetings}")
    print(f"‚úÖ Intera√ß√µes IA: {total_interactions}")
    print(f"‚úÖ Base Conhecimento: {total_knowledge}")
    print(f"\nüéØ Total de registros no banco: {total_users + total_meetings + total_interactions + total_knowledge}")
    
    print("\n‚úÖ BANCO DE DADOS CONFIGURADO E FUNCIONANDO CORRETAMENTE!")
    
except Exception as e:
    print(f"‚ùå Erro no resumo final: {str(e)}")

print("\n" + "=" * 60)
print("üèÅ Teste de conex√£o finalizado!")
print("=" * 60)